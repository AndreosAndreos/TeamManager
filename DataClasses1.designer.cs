#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeamManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TeamManager")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertStatistic(Statistic instance);
    partial void UpdateStatistic(Statistic instance);
    partial void DeleteStatistic(Statistic instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::TeamManager.Properties.Settings.Default.TeamManagerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Statistic> Statistics
		{
			get
			{
				return this.GetTable<Statistic>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Team_home_id;
		
		private int _Team_away_id;
		
		private System.DateTime _Match_date;
		
		private string _Location;
		
		private int _Score_home;
		
		private int _Score_away;
		
		private EntitySet<Statistic> _Statistics;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeam_home_idChanging(int value);
    partial void OnTeam_home_idChanged();
    partial void OnTeam_away_idChanging(int value);
    partial void OnTeam_away_idChanged();
    partial void OnMatch_dateChanging(System.DateTime value);
    partial void OnMatch_dateChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnScore_homeChanging(int value);
    partial void OnScore_homeChanged();
    partial void OnScore_awayChanging(int value);
    partial void OnScore_awayChanged();
    #endregion
		
		public Match()
		{
			this._Statistics = new EntitySet<Statistic>(new Action<Statistic>(this.attach_Statistics), new Action<Statistic>(this.detach_Statistics));
			this._Team = default(EntityRef<Team>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team_home_id", DbType="Int NOT NULL")]
		public int Team_home_id
		{
			get
			{
				return this._Team_home_id;
			}
			set
			{
				if ((this._Team_home_id != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam_home_idChanging(value);
					this.SendPropertyChanging();
					this._Team_home_id = value;
					this.SendPropertyChanged("Team_home_id");
					this.OnTeam_home_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team_away_id", DbType="Int NOT NULL")]
		public int Team_away_id
		{
			get
			{
				return this._Team_away_id;
			}
			set
			{
				if ((this._Team_away_id != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam_away_idChanging(value);
					this.SendPropertyChanging();
					this._Team_away_id = value;
					this.SendPropertyChanged("Team_away_id");
					this.OnTeam_away_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_date", DbType="Date NOT NULL")]
		public System.DateTime Match_date
		{
			get
			{
				return this._Match_date;
			}
			set
			{
				if ((this._Match_date != value))
				{
					this.OnMatch_dateChanging(value);
					this.SendPropertyChanging();
					this._Match_date = value;
					this.SendPropertyChanged("Match_date");
					this.OnMatch_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score_home", DbType="Int NOT NULL")]
		public int Score_home
		{
			get
			{
				return this._Score_home;
			}
			set
			{
				if ((this._Score_home != value))
				{
					this.OnScore_homeChanging(value);
					this.SendPropertyChanging();
					this._Score_home = value;
					this.SendPropertyChanged("Score_home");
					this.OnScore_homeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score_away", DbType="Int NOT NULL")]
		public int Score_away
		{
			get
			{
				return this._Score_away;
			}
			set
			{
				if ((this._Score_away != value))
				{
					this.OnScore_awayChanging(value);
					this.SendPropertyChanging();
					this._Score_away = value;
					this.SendPropertyChanged("Score_away");
					this.OnScore_awayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Statistic", Storage="_Statistics", ThisKey="ID", OtherKey="Match_id")]
		public EntitySet<Statistic> Statistics
		{
			get
			{
				return this._Statistics;
			}
			set
			{
				this._Statistics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match", Storage="_Team", ThisKey="Team_home_id", OtherKey="ID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._Team_home_id = value.ID;
					}
					else
					{
						this._Team_home_id = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match1", Storage="_Team1", ThisKey="Team_away_id", OtherKey="ID", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._Team_away_id = value.ID;
					}
					else
					{
						this._Team_away_id = default(int);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Statistics(Statistic entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Statistics(Statistic entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Team_id;
		
		private string _Name;
		
		private string _Position;
		
		private System.DateTime _Date_of_birth;
		
		private string _Nationality;
		
		private decimal _Salary;
		
		private System.DateTime _Contract_start_date;
		
		private System.DateTime _Contract_end_date;
		
		private EntitySet<Statistic> _Statistics;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeam_idChanging(int value);
    partial void OnTeam_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnDate_of_birthChanging(System.DateTime value);
    partial void OnDate_of_birthChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnSalaryChanging(decimal value);
    partial void OnSalaryChanged();
    partial void OnContract_start_dateChanging(System.DateTime value);
    partial void OnContract_start_dateChanged();
    partial void OnContract_end_dateChanging(System.DateTime value);
    partial void OnContract_end_dateChanged();
    #endregion
		
		public Player()
		{
			this._Statistics = new EntitySet<Statistic>(new Action<Statistic>(this.attach_Statistics), new Action<Statistic>(this.detach_Statistics));
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team_id", DbType="Int NOT NULL")]
		public int Team_id
		{
			get
			{
				return this._Team_id;
			}
			set
			{
				if ((this._Team_id != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam_idChanging(value);
					this.SendPropertyChanging();
					this._Team_id = value;
					this.SendPropertyChanged("Team_id");
					this.OnTeam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_birth", DbType="Date NOT NULL")]
		public System.DateTime Date_of_birth
		{
			get
			{
				return this._Date_of_birth;
			}
			set
			{
				if ((this._Date_of_birth != value))
				{
					this.OnDate_of_birthChanging(value);
					this.SendPropertyChanging();
					this._Date_of_birth = value;
					this.SendPropertyChanged("Date_of_birth");
					this.OnDate_of_birthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Decimal(10,2) NOT NULL")]
		public decimal Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_start_date", DbType="Date NOT NULL")]
		public System.DateTime Contract_start_date
		{
			get
			{
				return this._Contract_start_date;
			}
			set
			{
				if ((this._Contract_start_date != value))
				{
					this.OnContract_start_dateChanging(value);
					this.SendPropertyChanging();
					this._Contract_start_date = value;
					this.SendPropertyChanged("Contract_start_date");
					this.OnContract_start_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_end_date", DbType="Date NOT NULL")]
		public System.DateTime Contract_end_date
		{
			get
			{
				return this._Contract_end_date;
			}
			set
			{
				if ((this._Contract_end_date != value))
				{
					this.OnContract_end_dateChanging(value);
					this.SendPropertyChanging();
					this._Contract_end_date = value;
					this.SendPropertyChanged("Contract_end_date");
					this.OnContract_end_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Statistic", Storage="_Statistics", ThisKey="ID", OtherKey="Player_id")]
		public EntitySet<Statistic> Statistics
		{
			get
			{
				return this._Statistics;
			}
			set
			{
				this._Statistics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="Team_id", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._Team_id = value.ID;
					}
					else
					{
						this._Team_id = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Statistics(Statistic entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Statistics(Statistic entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Statistics]")]
	public partial class Statistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Match_id;
		
		private int _Player_id;
		
		private int _Goals;
		
		private int _Assists;
		
		private int _Yellow_cards;
		
		private int _Red_cards;
		
		private decimal _Minutes_played;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMatch_idChanging(int value);
    partial void OnMatch_idChanged();
    partial void OnPlayer_idChanging(int value);
    partial void OnPlayer_idChanged();
    partial void OnGoalsChanging(int value);
    partial void OnGoalsChanged();
    partial void OnAssistsChanging(int value);
    partial void OnAssistsChanged();
    partial void OnYellow_cardsChanging(int value);
    partial void OnYellow_cardsChanged();
    partial void OnRed_cardsChanging(int value);
    partial void OnRed_cardsChanged();
    partial void OnMinutes_playedChanging(decimal value);
    partial void OnMinutes_playedChanged();
    #endregion
		
		public Statistic()
		{
			this._Match = default(EntityRef<Match>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match_id", DbType="Int NOT NULL")]
		public int Match_id
		{
			get
			{
				return this._Match_id;
			}
			set
			{
				if ((this._Match_id != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatch_idChanging(value);
					this.SendPropertyChanging();
					this._Match_id = value;
					this.SendPropertyChanged("Match_id");
					this.OnMatch_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_id", DbType="Int NOT NULL")]
		public int Player_id
		{
			get
			{
				return this._Player_id;
			}
			set
			{
				if ((this._Player_id != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayer_idChanging(value);
					this.SendPropertyChanging();
					this._Player_id = value;
					this.SendPropertyChanged("Player_id");
					this.OnPlayer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goals", DbType="Int NOT NULL")]
		public int Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="Int NOT NULL")]
		public int Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yellow_cards", DbType="Int NOT NULL")]
		public int Yellow_cards
		{
			get
			{
				return this._Yellow_cards;
			}
			set
			{
				if ((this._Yellow_cards != value))
				{
					this.OnYellow_cardsChanging(value);
					this.SendPropertyChanging();
					this._Yellow_cards = value;
					this.SendPropertyChanged("Yellow_cards");
					this.OnYellow_cardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Red_cards", DbType="Int NOT NULL")]
		public int Red_cards
		{
			get
			{
				return this._Red_cards;
			}
			set
			{
				if ((this._Red_cards != value))
				{
					this.OnRed_cardsChanging(value);
					this.SendPropertyChanging();
					this._Red_cards = value;
					this.SendPropertyChanged("Red_cards");
					this.OnRed_cardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minutes_played", DbType="Decimal(3,2) NOT NULL")]
		public decimal Minutes_played
		{
			get
			{
				return this._Minutes_played;
			}
			set
			{
				if ((this._Minutes_played != value))
				{
					this.OnMinutes_playedChanging(value);
					this.SendPropertyChanging();
					this._Minutes_played = value;
					this.SendPropertyChanged("Minutes_played");
					this.OnMinutes_playedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Statistic", Storage="_Match", ThisKey="Match_id", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Statistics.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Statistics.Add(this);
						this._Match_id = value.ID;
					}
					else
					{
						this._Match_id = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Statistic", Storage="_Player", ThisKey="Player_id", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Statistics.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Statistics.Add(this);
						this._Player_id = value.ID;
					}
					else
					{
						this._Player_id = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Coach;
		
		private System.DateTime _Founded_date;
		
		private string _League;
		
		private string _Home_town;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCoachChanging(string value);
    partial void OnCoachChanged();
    partial void OnFounded_dateChanging(System.DateTime value);
    partial void OnFounded_dateChanged();
    partial void OnLeagueChanging(string value);
    partial void OnLeagueChanged();
    partial void OnHome_townChanging(string value);
    partial void OnHome_townChanged();
    #endregion
		
		public Team()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coach", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Coach
		{
			get
			{
				return this._Coach;
			}
			set
			{
				if ((this._Coach != value))
				{
					this.OnCoachChanging(value);
					this.SendPropertyChanging();
					this._Coach = value;
					this.SendPropertyChanged("Coach");
					this.OnCoachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Founded_date", DbType="Date NOT NULL")]
		public System.DateTime Founded_date
		{
			get
			{
				return this._Founded_date;
			}
			set
			{
				if ((this._Founded_date != value))
				{
					this.OnFounded_dateChanging(value);
					this.SendPropertyChanging();
					this._Founded_date = value;
					this.SendPropertyChanged("Founded_date");
					this.OnFounded_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_League", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					this.OnLeagueChanging(value);
					this.SendPropertyChanging();
					this._League = value;
					this.SendPropertyChanged("League");
					this.OnLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Home_town", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Home_town
		{
			get
			{
				return this._Home_town;
			}
			set
			{
				if ((this._Home_town != value))
				{
					this.OnHome_townChanging(value);
					this.SendPropertyChanging();
					this._Home_town = value;
					this.SendPropertyChanged("Home_town");
					this.OnHome_townChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match", Storage="_Matches", ThisKey="ID", OtherKey="Team_home_id")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match1", Storage="_Matches1", ThisKey="ID", OtherKey="Team_away_id")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="ID", OtherKey="Team_id")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
}
#pragma warning restore 1591
